#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib/')
require "turing" and include Turing

=begin
  Autor: Dawid Fatyga
  Turing Machine interpreter

  TODO:
    sprawdzanie granic tasmy
    rysowanie / obliczanie w osobnym watku
    krokowe przetwarzanie
    interaktywnosc
    funkcje!!
=end

program = Program.new
machine = Machine.new

def is_option?(o)
  ARGV.include?(":#{o.to_s}") or ARGV.include?("--#{o.to_s}")
end

def option_value(o)
  i = ARGV.index(":#{o.to_s}") || ARGV.index("--#{o.to_s}")
  raise "parametr '#{o}' byl ostatni" if ARGV.length == (i-1)
  ARGV[i+1]
end

[:version, :help].each do |cmd|
  if is_option?(cmd)
    Commands.call(cmd, true)
    exit
  end
end

Commands.call("syntax-check", machine) if is_option? "syntax-check"
Commands.call :time, machine, program, option_value(:time) if is_option? :time

begin
  lineno = 1
  while (line = gets) and (line = line.strip) != ""
    if line.start_with?(":") and line.skip!(":")
      params = line.split(" ")
      name = params.shift
      Commands.call(name, machine, program, *params)
    else
      state, shifts = line.split("=>").collect(&:strip)
      unless shifts then
        shifts = state
        state = nil
      end

      shifts.split("||").collect(&:strip).each do |tuple|
        tuple = tuple.collect { |shift| shift.split(' ') }
        tuple.each do |s|
          state ||= s.shift.skip!(Turing::STATE_REGEXP)
          symbol = s.shift.skip!(Turing::SYMBOL_REGEXP)
          next_state = s.shift.skip!(Turing::STATE_REGEXP)
          write_symbol = (s.shift or "-").skip!(Turing::SYMBOL_REGEXP)
          direction = (s.shift or "-").skip!(Turing::DIRECTION_REGEXP)
          program.add_shift(state, symbol, next_state, write_symbol, direction)
        end
      end
    end
    lineno += 1
  end

  unless machine.syntax_check
    raise "nie podano zadnego wejscia" unless machine.inputs

    machine.inputs.each do |input|
      puts (program.question % input.to_s) + " #{machine.execute(input, program) ? "Tak" : "Nie"}"
    end
  else
    puts "skladnia ok"
  end
rescue Turing::SyntaxError => e
  puts "linia #{lineno}: #{e.message}"
rescue Interrupt
  puts "\ndo widzenia"
end

